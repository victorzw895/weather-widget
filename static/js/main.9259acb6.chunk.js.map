{"version":3,"sources":["utils/Api.js","components/WeatherWidget.js","components/App.js","serviceWorker.js","index.js"],"names":["fetchWeather","city","weeklyWeatherUrl","process","fetch","then","response","json","WeatherWidget","state","id","input","loaded","_handleChange","bind","_handleSubmit","location","URLSearchParams","get","params","this","getParams","window","search","cod","setState","Error","message","console","log","renderWidget","catch","error","myWidgetParam","push","cityid","appid","units","containerid","script","document","createElement","async","charset","src","s","getElementsByTagName","parentNode","insertBefore","event","target","value","preventDefault","href","widget","Segment","textAlign","style","height","display","justifyContent","alignItems","onSubmit","Input","focus","placeholder","action","content","color","type","name","onChange","Component","App","className","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAUeA,EALM,SAAAC,GACnB,IAAIC,EAAgB,UAHT,0CAGS,sBAA0BD,EAA1B,kBANNE,oCAOd,OAAOC,MAAMF,GAAkBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,W,kBCHtCC,E,YACnB,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,GAAI,KACJT,KAAM,SACNU,MAAO,GACPC,QAAQ,GAEV,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBATT,E,uEAYJE,GAER,MAAO,CACLf,KAFmB,IAAIgB,gBAAgBD,GAEpBE,IAAI,W,0CAIN,IAAD,OACZC,EAASC,KAAKC,UAAUC,OAAON,SAASO,QAEtCtB,EAASmB,KAAKX,MAAdR,KACRD,EAAamB,EAAOlB,MAAQA,GACzBI,MAAK,SAAAC,GACJ,GAAqB,MAAjBA,EAASkB,IASX,MADA,EAAKC,SAAS,CAAExB,KAAMkB,EAAOlB,KAAMW,QAAQ,IACrC,IAAIc,MAAJ,UACDpB,EAASkB,IADR,cACiBlB,EAASqB,QAD1B,aACsCR,EAAOlB,OATnD2B,QAAQC,IAAIvB,GACZ,EAAKwB,aAAaxB,EAASI,IAC3B,EAAKe,SAAS,CACZf,GAAIJ,EAASI,GACbE,QAAQ,OASbmB,OAAM,SAAAC,GAAK,OAAIJ,QAAQI,MAAMA,Q,mCAGrBtB,GAGPY,OAAOW,cACTL,QAAQC,IAAIP,OAAOW,eAEnBX,OAAOW,cAAgB,GAEzBX,OAAOW,cAAcC,KAAK,CACxBxB,GAAI,GACJyB,OAAQzB,EACR0B,MAVcjC,mCAWdkC,MAAO,SACPC,YAAa,6BAEf,WACE,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOG,OAAQ,EACfH,EAAOI,QAAU,QACjBJ,EAAOK,IACL,8FACF,IAAIC,EAAIL,SAASM,qBAAqB,UAAU,GAChDD,EAAEE,WAAWC,aAAaT,EAAQM,GAPpC,K,oCAWYI,GACZ7B,KAAKK,SAAS,CAAEd,MAAOsC,EAAMC,OAAOC,U,oCAGxBF,GACP7B,KAAKX,MAAME,QACdsC,EAAMG,iBACN9B,OAAON,SAASqC,KAAO,4B,+BAKzB,IAAIC,EAQJ,OANEA,EADElC,KAAKX,MAAMC,IAAMU,KAAKX,MAAMG,OACrB,yBAAKF,GAAG,8BACPU,KAAKX,MAAMC,IAAMU,KAAKX,MAAMG,OAC7B,sDAA4BQ,KAAKX,MAAMR,MAEvC,0CAGT,kBAACsD,EAAA,EAAD,CACEC,UAAU,SACVC,MAAO,CACLC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,6BACE,8CACA,0BAAMC,SAAU1C,KAAKL,eACnB,kBAACgD,EAAA,EAAD,CACEC,OAAK,EACLC,YAAY,iBACZC,OAAQ,CAAEC,QAAS,SAAUC,MAAO,QACpCA,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,SAAUnD,KAAKP,iBAGlByC,Q,GAhHgCkB,aCa5BC,G,wLARX,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,W,GAJUF,cCKEG,QACW,cAA7BrD,OAAON,SAAS4D,UAEe,UAA7BtD,OAAON,SAAS4D,UAEhBtD,OAAON,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvC,SAASwC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9E,MAAK,SAAA+E,GACjCA,EAAaC,kB","file":"static/js/main.9259acb6.chunk.js","sourcesContent":["const _APIKEY = process.env.REACT_APP_OPEN_WEATHER_MAP;\n\n// const _APIKEY = \"fdf1d48f3f3951dcb129a7e4be3b7d89\";\nlet apiUrl = \"https://api.openweathermap.org/data/2.5\";\n\nconst fetchWeather = city => {\n  let weeklyWeatherUrl = `${apiUrl}/weather?q=${city}&APPID=${_APIKEY}`;\n  return fetch(weeklyWeatherUrl).then(response => response.json());\n};\n\nexport default fetchWeather;\n\n// if response.cod = \"400\" handle error else if \"200\"\n","import React, { Component } from \"react\";\nimport fetchWeather from \"../utils/Api\";\nimport { Segment, Input } from \"semantic-ui-react\";\n\nexport default class WeatherWidget extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: null,\n      city: \"Sydney\",\n      input: \"\",\n      loaded: false\n    };\n    this._handleChange = this._handleChange.bind(this);\n    this._handleSubmit = this._handleSubmit.bind(this);\n  }\n\n  getParams(location) {\n    const searchParams = new URLSearchParams(location);\n    return {\n      city: searchParams.get(\"city\")\n    };\n  }\n\n  componentDidMount() {\n    const params = this.getParams(window.location.search);\n\n    const { city } = this.state;\n    fetchWeather(params.city || city) // if url query, fetch that, else from react state\n      .then(response => {\n        if (response.cod === 200) {\n          console.log(response);\n          this.renderWidget(response.id);\n          this.setState({\n            id: response.id,\n            loaded: true\n          });\n        } else {\n          this.setState({ city: params.city, loaded: true });\n          throw new Error(\n            `${response.cod} - ${response.message}: ${params.city}`\n          );\n        }\n      })\n      .catch(error => console.error(error));\n  }\n\n  renderWidget(id) {\n    const _APIKEY = process.env.REACT_APP_OPEN_WEATHER_MAP;\n\n    if (window.myWidgetParam) {\n      console.log(window.myWidgetParam);\n    } else {\n      window.myWidgetParam = [];\n    }\n    window.myWidgetParam.push({\n      id: 15,\n      cityid: id,\n      appid: _APIKEY,\n      units: \"metric\",\n      containerid: \"openweathermap-widget-15\"\n    });\n    (function() {\n      var script = document.createElement(\"script\");\n      script.async = true;\n      script.charset = \"utf-8\";\n      script.src =\n        \"//openweathermap.org/themes/openweathermap/assets/vendor/owm/js/weather-widget-generator.js\";\n      var s = document.getElementsByTagName(\"script\")[0];\n      s.parentNode.insertBefore(script, s);\n    })();\n  }\n\n  _handleChange(event) {\n    this.setState({ input: event.target.value });\n  }\n\n  _handleSubmit(event) {\n    if (!this.state.input) {\n      event.preventDefault();\n      window.location.href = \"http://localhost:3000/\";\n    }\n  }\n\n  render() {\n    let widget;\n    if (this.state.id && this.state.loaded) {\n      widget = <div id=\"openweathermap-widget-15\"></div>;\n    } else if (!this.state.id && this.state.loaded) {\n      widget = <h2>Can't find weather for {this.state.city}</h2>;\n    } else {\n      widget = <h2>Loading...</h2>;\n    }\n    return (\n      <Segment\n        textAlign=\"center\"\n        style={{\n          height: \"100vh\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        }}\n      >\n        <div>\n          <h1>Weather Widget</h1>\n          <form onSubmit={this._handleSubmit}>\n            <Input\n              focus\n              placeholder=\"Search City...\"\n              action={{ content: \"Search\", color: \"blue\" }}\n              color=\"blue\"\n              type=\"text\"\n              name=\"city\"\n              onChange={this._handleChange}\n            ></Input>\n          </form>\n          {widget}\n        </div>\n      </Segment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport WeatherWidget from \"./WeatherWidget\";\n\nimport \"semantic-ui-css/semantic.min.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WeatherWidget />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import App from \"./components/App\";\n// import registerServiceWorker from \"./registerServiceWorker\";\n// import \"./index.css\";\n\n// ReactDOM.render(<App />, document.getElementById(\"root\"));\n// registerServiceWorker();\n"],"sourceRoot":""}